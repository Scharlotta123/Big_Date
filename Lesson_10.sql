-- 1. Проанализировать какие запросы могут выполняться наиболее часто в процессе работы приложения и добавить необходимые индексы.
-- На мой взгляд, самыми частыми запросами будут:
-- найти какого то пользователя по id (с помощью конструктора добавлены индексы к полям users.id и profiles.user_id)
-- какой статус у дружбы ( с помощью конструктора добавлен индекс к полю status_id)
-- кто и от кого отправлено сообщение (с помощью конструктора добавлены индексы к полям from_user_id и to_user_id)
-- сколько лайков в каком либо разрезе: у пользователя, у фото и т.п. (с помощью конструктора добавлен индекс к полю likes.id)
-- остальные таблицы считаю не так часто используемыми, и поэтому в них индексы не ставила.

-- 2. Задание на оконные функции
-- Построить запрос, который будет выводить следующие столбцы:
-- имя группы 
-- среднее количество пользователей в группах (я не очень поняла как рассчитать среднее значение в одной группе, решила так: 
-- рассчитать сколько в среднем приходится человек на 1 группу)
-- самый молодой пользователь в группе
-- самый пожилой пользователь в группе
-- общее количество пользователей в группе
-- всего пользователей в системе
-- отношение в процентах (общее количество пользователей в группе / всего пользователей в системе) * 100
use vk;
select distinct comunities.name,
	-- avg(comunities_users.user_id) over w as среднее_количество_пользователей_в_группах,
    count(profiles.user_id) over () / count(comunities.id) over w as среднее,
    max(profiles.birthday) over w as самый_молодой,
    min(profiles.birthday) over w as самый_пожилой,
    count(comunities.id)  over w as количество_в_группе,
    count(profiles.user_id) over () as всего_пользователей,
    count(comunities.id) over w / count(profiles.user_id) over () * 100 as процент
    from comunities 
join comunities_users 
on comunities.id = comunities_users.comunity_id
join profiles
on profiles.user_id = comunities_users.user_id
window w as (partition by comunities.name);